// Gestionnaire des sons et effets sonores
class SoundManager {
    constructor() {
        this.isMuted = false;
        this.sounds = {};
        this.volume = 0.5; // Volume par d√©faut (50%)
        this.useAudioFiles = false; // Mettre √† true pour utiliser des fichiers audio
        this.currentUser = null; // Utilisateur actuel pour les pr√©f√©rences
        
        this.initializeSounds();
        
        console.log('üîä SoundManager initialis√©');
    }
    
    // Initialiser les sons
    initializeSounds() {
        if (this.useAudioFiles) {
            // Mode fichiers audio - Charge les MP3/WAV depuis le dossier sounds/
            this.initializeAudioFiles();
        } else {
            // Mode beeps synth√©tiques - G√©n√©ration avec Web Audio API
            this.initializeSyntheticSounds();
        }
    }
    
    // Initialiser avec des fichiers audio (avec fallback sur beeps)
    initializeAudioFiles() {
        console.log('üéµ Chargement des fichiers audio avec fallback...');
        
        const soundConfig = {
            letterWrong: { 
                file: 'sounds/letter-wrong.mp3',
                fallback: () => this.createBeep(200, 0.15, 'sawtooth')
            },
            letterWrongPlace: { 
                file: 'sounds/letter-wrong-place.mp3',
                fallback: () => this.createBeep(400, 0.1, 'triangle')
            },
            wordFound: { 
                file: 'sounds/word-found.mp3',
                fallback: () => this.createMelody([600, 800, 1000], 0.15)
            },
            levelCompleted: { 
                file: 'sounds/level-completed.mp3',
                fallback: () => this.createMelody([800, 1000, 1200, 1500], 0.2)
            },
            click: { 
                file: 'sounds/click.mp3',
                fallback: () => this.createBeep(300, 0.05, 'sine')
            },
            hint: { 
                file: 'sounds/hint.mp3',
                fallback: () => this.createBeep(500, 0.1, 'triangle')
            }
        };
        
        Object.keys(soundConfig).forEach(key => {
            this.sounds[key] = this.createAudioFileSound(
                soundConfig[key].file, 
                soundConfig[key].fallback()
            );
        });
    }
    
    // Cr√©er un son √† partir d'un fichier audio avec fallback
    createAudioFileSound(filePath, fallbackSound) {
        return () => {
            if (this.isMuted) return;
            
            try {
                const audio = new Audio(filePath);
                audio.volume = this.volume;
                
                audio.play().catch(e => {
                    // Si le fichier n'existe pas ou erreur, jouer le fallback
                    console.warn(`‚ö†Ô∏è Fichier ${filePath} introuvable, utilisation du son par d√©faut`);
                    if (fallbackSound) {
                        fallbackSound();
                    }
                });
            } catch (e) {
                // Erreur de chargement, jouer le fallback
                console.warn(`‚ö†Ô∏è Erreur chargement ${filePath}, utilisation du son par d√©faut`);
                if (fallbackSound) {
                    fallbackSound();
                }
            }
        };
    }
    
    // Initialiser avec des sons synth√©tiques
    initializeSyntheticSounds() {
        // Cr√©er les sons avec Web Audio API
        // Format: createBeep(fr√©quence_Hz, dur√©e_secondes, forme_onde)
        // Forme d'onde: 'sine' = doux, 'sawtooth' = r√¢peux, 'triangle' = moyen
        
        this.sounds = {
            // üü¢ Lettre correcte (verte) - Son joyeux et satisfaisant
            // Jou√© quand: L'utilisateur tape une lettre √† la bonne place
            // letterCorrect: this.createBeep(800, 0.1, 'sine'),
            
            // üî¥ Lettre incorrecte (rouge) - Son d'erreur doux
            // Jou√© quand: L'utilisateur tape une lettre qui n'est pas dans le mot
            letterWrong: this.createBeep(200, 0.15, 'sawtooth'),
            
            // üü† Lettre mal plac√©e (orange) - Son neutre informatif
            // Jou√© quand: Lettre existe dans le mot mais pas √† cette position
            letterWrongPlace: this.createBeep(400, 0.1, 'triangle'),
            
            // üéâ Mot trouv√© - M√©lodie de victoire montante
            // Chaque note dure 0.15s, cr√©e une m√©lodie joyeuse
            // Jou√© quand: L'utilisateur trouve le mot complet
            wordFound: this.createMelody([600, 800, 1000], 0.15),
            
            // üèÜ Niveau compl√©t√© - Grande fanfare de c√©l√©bration
            // Plus longue (0.2s par note) pour une fanfare triomphale
            // Jou√© quand: Tous les mots d'un niveau sont trouv√©s
            levelCompleted: this.createMelody([800, 1000, 1200, 1500], 0.2),
            
            // üñ±Ô∏è Click - Son de bouton tr√®s court
            // Jou√© quand: Clic sur le bouton son ou autres boutons
            click: this.createBeep(300, 0.05, 'sine'),
            
            // üí° Indice/Aide - Son myst√©rieux
            // Jou√© quand: L'utilisateur clique sur le bouton d'aide (?)
            hint: this.createBeep(500, 0.1, 'triangle')
        };
    }
    
    // Cr√©er un beep simple
    createBeep(frequency, duration, type = 'sine') {
        return () => {
            if (this.isMuted) return;
            
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = frequency;
                oscillator.type = type;
                
                gainNode.gain.setValueAtTime(this.volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                console.warn('‚ö†Ô∏è Impossible de jouer le son:', e);
            }
        };
    }
    
    // Cr√©er une m√©lodie (plusieurs notes)
    createMelody(frequencies, noteDuration) {
        return () => {
            if (this.isMuted) return;
            
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                frequencies.forEach((freq, index) => {
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);
                    
                    oscillator.frequency.value = freq;
                    oscillator.type = 'sine';
                    
                    const startTime = audioContext.currentTime + (index * noteDuration);
                    const stopTime = startTime + noteDuration;
                    
                    gainNode.gain.setValueAtTime(this.volume, startTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, stopTime);
                    
                    oscillator.start(startTime);
                    oscillator.stop(stopTime);
                });
            } catch (e) {
                console.warn('‚ö†Ô∏è Impossible de jouer la m√©lodie:', e);
            }
        };
    }
    
    // Jouer un son sp√©cifique
    play(soundName) {
        if (this.sounds[soundName]) {
            this.sounds[soundName]();
            console.log(`üîä Son jou√©: ${soundName}`);
        } else {
            console.warn(`‚ö†Ô∏è Son inconnu: ${soundName}`);
        }
    }
    
    // Activer/d√©sactiver le son
    toggleMute() {
        this.isMuted = !this.isMuted;
        this.saveSoundPreferences();
        console.log(this.isMuted ? 'üîá Sons d√©sactiv√©s' : 'üîä Sons activ√©s');
        return this.isMuted;
    }
    
    // D√©finir le volume (0.0 √† 1.0)
    setVolume(volume) {
        this.volume = Math.max(0, Math.min(1, volume));
        this.saveSoundPreferences();
        console.log(`üîä Volume: ${Math.round(this.volume * 100)}%`);
    }
    
    // V√©rifier si les sons sont activ√©s
    isSoundEnabled() {
        return !this.isMuted;
    }
    
    // D√©finir l'utilisateur actuel
    setUser(username) {
        this.currentUser = username;
        if (username) {
            this.loadSoundPreferences();
        }
    }

    // Sauvegarder les pr√©f√©rences sonores (par utilisateur)
    saveSoundPreferences() {
        if (!this.currentUser) return;
        
        const preferences = {
            isMuted: this.isMuted,
            volume: this.volume
        };
        localStorage.setItem(`mots_game_soundPreferences_${this.currentUser}`, JSON.stringify(preferences));
    }
    
    // Charger les pr√©f√©rences sonores (par utilisateur)
    loadSoundPreferences() {
        if (!this.currentUser) return;
        
        const saved = localStorage.getItem(`mots_game_soundPreferences_${this.currentUser}`);
        if (saved) {
            try {
                const preferences = JSON.parse(saved);
                this.isMuted = preferences.isMuted || false;
                this.volume = preferences.volume || 0.5;
                console.log('üîä Pr√©f√©rences sonores charg√©es pour', this.currentUser);
            } catch (e) {
                console.warn('‚ö†Ô∏è Erreur chargement pr√©f√©rences sonores:', e);
            }
        } else {
            // Valeurs par d√©faut
            this.isMuted = false;
            this.volume = 0.5;
        }
    }
}

